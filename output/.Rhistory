# Set WD etc.
library(here)
Load pivotal probability functions:
av_piv_path <- here("utils/av_pivotal_probs_analytical_general_v2.r")
source(av_piv_path)
plur_piv_path <- here("utils/plurality_pivotal_probabilities_analytical.r")
source(plur_piv_path)
# To replicate Andy's function(s):
sim_appr2 <- here("utils", "general_iteration_simulation_approach.r")
source(sim_appr2)
sv_file <-  here("utils/sv.r")
source(sv_file)
# Load my own functions:
functions <- here("utils/functions.r")
source(functions)
# Load necessary libraries:
library(ggplot2)
library(reshape2)
library(dplyr)
# Import AES and Ballot data
# Note that these are normalised utilities. To obtain like-dislike scores I will need to re-run the original script.
aes_utils <- read.csv(here("../data", "australia", "AES_utility.csv"))[, -1]
aes_utils <- aes_utils[, c("GRN", "LIB", "LAB")] #common ordering
# Import non-standardised utilities
aes_utils_raw <- read.csv(here("../data", "australia", "aes_nsw_full.csv"))[, -1]
nsw <- read.csv(here("../data/australia/nsw_ballots.csv"))[, -1]
resampling <- read.csv(here("../data/australia/nsw_resampling.csv"))[, -1]
# Create DF with ballotprofiles
const_bp <- data.frame(district = nsw$District,
AB = nsw$`GRN.LIB` + nsw$`GRN.LIB.LAB`,
AC = nsw$`GRN.LAB` + nsw$`GRN.LAB.LIB`,
BA = nsw$`LIB.GRN` + nsw$`LIB.GRN.LAB`,
BC = nsw$`LIB.LAB` + nsw$`LIB.LAB.GRN`,
CA = nsw$`LAB.GRN` + nsw$`LAB.GRN.LIB`,
CB = nsw$`LAB.LIB` + nsw$`LAB.LIB.GRN`,
A = nsw$GRN,
B = nsw$LIB,
C = nsw$LAB)
# For now, let's not use truncated ballots:
const_bp_no_trunc <- const_bp
const_bp_no_trunc[, 8:10] <- 0
const_bp_no_trunc[, 2:10] <- t(apply(const_bp_no_trunc[, 2:10], 1, function(x) x / sum(x)))
