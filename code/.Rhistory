wasted_vote(sv_list[[1]][sv_list[[1]]$s == 85,], test_props, big_list_na_omit[[i]]$weights)
wasted_vote <- function(sv_obj, piv_probs, weights = rep(1, nrow(sv_obj))){
V0_tab <- matrix(0, ncol = 3, nrow = nrow(sv_obj))
for(i in 1:nrow(V0_tab)){
x <- sv_obj$sin_plur[[i]]
V0_tab[[i, x]] <- 1
}
wasted <- cbind(rep(piv_probs$BC, nrow(sv_obj)), piv_probs$AC, piv_probs$AB)
wasted_prob <- apply(wasted * V0_tab, 1, sum, na.rm = T)
wasted_sum <- sum(wasted_prob * weights, na.rm = T) / sum(weights[!is.na(wasted_prob)], na.rm = T)
total <- sum(unlist(piv_probs))
return(list(wasted = wasted_sum, total = total))
}
wasted_vote(sv_list[[1]][sv_list[[1]]$s == 85,], test_props, big_list_na_omit[[i]]$weights)
plurality_wasted_vote_from_sv_object(test)
wasted_vote(sv_list[[1]][sv_list[[1]]$s == 85,], test_props, big_list_na_omit[[i]]$weights)
wasted_vote <- function(sv_obj, piv_probs, weights = rep(1, nrow(sv_obj))){
V0_tab <- matrix(0, ncol = 3, nrow = nrow(sv_obj))
for(i in 1:nrow(V0_tab)){
x <- sv_obj$sin_plur[[i]]
V0_tab[[i, x]] <- 1
}
wasted <- cbind(rep(piv_probs$BC, nrow(sv_obj)), piv_probs$AC, piv_probs$AB)
return(wasted)
wasted_prob <- apply(wasted * V0_tab, 1, sum, na.rm = T)
return(list(wasted_prob, weights))
wasted_sum <- sum(wasted_prob * weights, na.rm = T) / sum(weights[!is.na(wasted_prob)], na.rm = T)
total <- sum(unlist(piv_probs))
return(list(wasted = wasted_sum, total = total))
}
wasted_vote(sv_list[[1]][sv_list[[1]]$s == 85,], test_props, big_list_na_omit[[i]]$weights)
nrow(sv_list[[1]][sv_list[[1]]$s == 85, ])
wasted_vote <- function(sv_obj, piv_probs, weights = rep(1, nrow(sv_obj))){
V0_tab <- matrix(0, ncol = 3, nrow = nrow(sv_obj))
for(i in 1:nrow(V0_tab)){
x <- sv_obj$sin_plur[[i]]
V0_tab[[i, x]] <- 1
}
wasted <- cbind(rep(piv_probs$BC, nrow(sv_obj)), piv_probs$AC, piv_probs$AB)
return(list(wasted, weights))
wasted_prob <- apply(wasted * V0_tab, 1, sum, na.rm = T)
return(list(wasted_prob, weights))
wasted_sum <- sum(wasted_prob * weights, na.rm = T) / sum(weights[!is.na(wasted_prob)], na.rm = T)
total <- sum(unlist(piv_probs))
return(list(wasted = wasted_sum, total = total))
}
wasted_vote(sv_list[[1]][sv_list[[1]]$s == 85,], test_props, big_list_na_omit[[i]]$weights)
wasted_vote(sv_list[[1]][sv_list[[1]]$s == 85,], test_props, big_list_na_omit[[1]]$weights)
wasted_vote <- function(sv_obj, piv_probs, weights = rep(1, nrow(sv_obj))){
V0_tab <- matrix(0, ncol = 3, nrow = nrow(sv_obj))
for(i in 1:nrow(V0_tab)){
x <- sv_obj$sin_plur[[i]]
V0_tab[[i, x]] <- 1
}
wasted <- cbind(rep(piv_probs$BC, nrow(sv_obj)), piv_probs$AC, piv_probs$AB)
#return(list(wasted, weights))
wasted_prob <- apply(wasted * V0_tab, 1, sum, na.rm = T)
#return(list(wasted_prob, weights))
wasted_sum <- sum(wasted_prob * weights, na.rm = T) / sum(weights[!is.na(wasted_prob)], na.rm = T)
total <- sum(unlist(piv_probs))
return(list(wasted = wasted_sum, total = total))
}
wasted_vote(sv_list[[1]][sv_list[[1]]$s == 85,], test_props, big_list_na_omit[[1]]$weights)
plurality_wasted_vote_from_sv_object(test)
paradox_df <- matrix(NA, ncol = 3, nrow = length(big_list_na_omit))
for(i in 1:length(big_list_na_omit)){
print(i)
v_vec <- big_list_na_omit[[i]]$v_vec
pprobs_rcv <- av.pivotal.event.probs.general(c(v_vec, 0, 0, 0), rep(s, 4))
par_rcv <- non_monoton(sv_list[[i]], pprobs_rcv, weights = big_list_na_omit[[i]]$weights)
v_vec_plur <- c(v_vec[1] + v_vec[2], v_vec[3] + v_vec[4], v_vec[5] + v_vec[6])
pprobs_plur <- plurality.pivotal.probabilities(v_vec_plur, s)
par_plur <- wasted_vote(sv_list[[i]], pprobs_plur, big_list_na_omit[[i]]$weights)
no_show <- par_rcv$no_show / par_rcv$total
nonmon <- (par_rcv$nonmon1 + par_rcv$nonmon2) / par_rcv$total
wasted <- par_plur$wasted / par_plur$total
paradox_df[i, ] <- c(no_show, nonmon, wasted)
}
s <- 85
paradox_df <- matrix(NA, ncol = 3, nrow = length(big_list_na_omit))
for(i in 1:length(big_list_na_omit)){
s <- 85
paradox_df <- matrix(NA, ncol = 3, nrow = length(big_list_na_omit))
for(i in 1:length(big_list_na_omit)){
print(i)
v_vec <- big_list_na_omit[[i]]$v_vec
pprobs_rcv <- av.pivotal.event.probs.general(c(v_vec, 0, 0, 0), rep(s, 4))
par_rcv <- non_monoton(sv_list[[i]][sv_list[[i]]$s == s], pprobs_rcv, weights = big_list_na_omit[[i]]$weights)
v_vec_plur <- c(v_vec[1] + v_vec[2], v_vec[3] + v_vec[4], v_vec[5] + v_vec[6])
pprobs_plur <- plurality.pivotal.probabilities(v_vec_plur, s)
par_plur <- wasted_vote(sv_list[[i]][sv_list[[i]]$s == s], pprobs_plur, big_list_na_omit[[i]]$weights)
no_show <- par_rcv$no_show / par_rcv$total
nonmon <- (par_rcv$nonmon1 + par_rcv$nonmon2) / par_rcv$total
wasted <- par_plur$wasted / par_plur$total
paradox_df[i, ] <- c(no_show, nonmon, wasted)
}
paradox_df <- matrix(NA, ncol = 3, nrow = length(big_list_na_omit))
for(i in 1:length(big_list_na_omit)){
print(i)
v_vec <- big_list_na_omit[[i]]$v_vec
pprobs_rcv <- av.pivotal.event.probs.general(c(v_vec, 0, 0, 0), rep(s, 4))
par_rcv <- non_monoton(sv_list[[i]][sv_list[[i]]$s == s], pprobs_rcv, weights = big_list_na_omit[[i]]$weights)
v_vec_plur <- c(v_vec[1] + v_vec[2], v_vec[3] + v_vec[4], v_vec[5] + v_vec[6])
pprobs_plur <- plurality.pivotal.probabilities(v_vec_plur, s)
par_plur <- wasted_vote(sv_list[[i]][sv_list[[i]]$s == s], pprobs_plur, big_list_na_omit[[i]]$weights)
no_show <- par_rcv$no_show / par_rcv$total
nonmon <- (par_rcv$nonmon1 + par_rcv$nonmon2) / par_rcv$total
wasted <- par_plur$wasted / par_plur$total
paradox_df[i, ] <- c(no_show, nonmon, wasted)
}
paradox_df <- matrix(NA, ncol = 3, nrow = length(big_list_na_omit))
for(i in 1:length(big_list_na_omit)){
print(i)
v_vec <- big_list_na_omit[[i]]$v_vec
pprobs_rcv <- av.pivotal.event.probs.general(c(v_vec, 0, 0, 0), rep(s, 4))
par_rcv <- non_monoton(sv_list[[i]][sv_list[[i]]$s == s, ], pprobs_rcv, weights = big_list_na_omit[[i]]$weights)
v_vec_plur <- c(v_vec[1] + v_vec[2], v_vec[3] + v_vec[4], v_vec[5] + v_vec[6])
pprobs_plur <- plurality.pivotal.probabilities(v_vec_plur, s)
par_plur <- wasted_vote(sv_list[[i]][sv_list[[i]]$s == s, ], pprobs_plur, big_list_na_omit[[i]]$weights)
no_show <- par_rcv$no_show / par_rcv$total
nonmon <- (par_rcv$nonmon1 + par_rcv$nonmon2) / par_rcv$total
wasted <- par_plur$wasted / par_plur$total
paradox_df[i, ] <- c(no_show, nonmon, wasted)
}
paradox_df <- as.data.frame(paradox_df)
names(paradox_df) <- c("no_show", "nonmon", "wasted")
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show)) +
geom_point(aes(y = nonmon), colour = "blue") +
geom_abline(intercept = 0, slope = 1) +
xlim(0, 0.5) + ylim(0, 0.15)
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show)) +
geom_point(aes(y = nonmon), colour = "blue") +
geom_abline(intercept = 0, slope = 1) +
xlim(0, 0.5) + ylim(0, 0.3)
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show), colour = "blue", size = 1.5, alpha = 0.5) +
geom_point(aes(y = nonmon), colour = "red", size = 1.5, alpha = 0.5) +
geom_abline(intercept = 0, slope = 1) +
geom_smooth(method = "loess", formula = "wasted ~ no_show") +
xlim(0, 0.5) + ylim(0, 0.3)
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show), colour = "blue", size = 1.5, alpha = 0.5) +
geom_point(aes(y = nonmon), colour = "red", size = 1.5, alpha = 0.5) +
geom_abline(intercept = 0, slope = 1) +
geom_smooth(method = "loess", formula = wasted ~ no_show) +
xlim(0, 0.5) + ylim(0, 0.3)
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show), colour = "blue", size = 1.5, alpha = 0.5) +
geom_point(aes(y = nonmon), colour = "red", size = 1.5, alpha = 0.5) +
geom_abline(intercept = 0, slope = 1) +
geom_smooth(method = "loess", formula = wasted ~ no_show, aes(y = no_show)) +
xlim(0, 0.5) + ylim(0, 0.3)
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show), colour = "blue", size = 1.5, alpha = 0.5) +
geom_point(aes(y = nonmon), colour = "red", size = 1.5, alpha = 0.5) +
geom_abline(intercept = 0, slope = 1) +
geom_smooth(method = "loess", formula = no_show ~ wasted, aes(y = no_show)) +
xlim(0, 0.5) + ylim(0, 0.3)
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show), colour = "blue", size = 1.5, alpha = 0.5) +
geom_point(aes(y = nonmon), colour = "red", size = 1.5, alpha = 0.5) +
geom_abline(intercept = 0, slope = 1) +
geom_smooth(method = "loess", formula = "no_show ~ wasted", aes(y = no_show)) +
xlim(0, 0.5) + ylim(0, 0.3)
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show), colour = "blue", size = 1.5, alpha = 0.5) +
geom_point(aes(y = nonmon), colour = "red", size = 1.5, alpha = 0.5) +
geom_abline(intercept = 0, slope = 1) +
geom_smooth(method = "loess", aes(y = no_show)) +
xlim(0, 0.5) + ylim(0, 0.3)
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show), colour = "blue", size = 1.5, alpha = 0.2) +
geom_point(aes(y = nonmon), colour = "red", size = 1.5, alpha = 0.2) +
geom_abline(intercept = 0, slope = 1) +
geom_smooth(method = "loess", aes(y = no_show), colour = "blue") +
geom_smooth(method = "loess", aes(y = nonmon), colour = "red") +
xlim(0, 0.5) + ylim(0, 0.3)
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show), colour = "blue", size = 1.5, alpha = 0.2) +
geom_point(aes(y = nonmon), colour = "red", size = 1.5, alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, lty = "dotted") +
geom_smooth(method = "loess", aes(y = no_show), colour = "blue") +
geom_smooth(method = "loess", aes(y = nonmon), colour = "red") +
xlim(0, 0.5) + ylim(0, 0.3)
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show), colour = "blue", size = 1.5, alpha = 0.2) +
geom_point(aes(y = nonmon), colour = "red", size = 1.5, alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, lty = "dotted") +
geom_smooth(method = "loess", aes(y = no_show), colour = "blue") +
geom_smooth(method = "loess", aes(y = nonmon), colour = "red") +
xlim(0, 0.4) + ylim(0, 0.4)
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show), colour = "blue", size = 1.5, alpha = 0.2) +
geom_point(aes(y = nonmon), colour = "red", size = 1.5, alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, lty = "dotted") +
geom_smooth(method = "loess", aes(y = no_show), colour = "blue") +
geom_smooth(method = "loess", aes(y = nonmon), colour = "red") +
xlim(0, 0.4) + ylim(0, 0.4) +
theme_bw()
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show), colour = "blue", size = 1.5, alpha = 0.2) +
geom_point(aes(y = nonmon), colour = "red", size = 1.5, alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, lty = "dotted") +
geom_smooth(method = "loess", aes(y = no_show), colour = "blue") +
geom_smooth(method = "loess", aes(y = nonmon), colour = "red") +
xlim(0, 0.4) + ylim(0, 0.4) +
labs(x = "Pr(Wasted Vote, Plurality)", y = "Pr(Voting Paradox, RCV)") +
theme_bw()
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show), colour = A, size = 1.5, alpha = 0.2) +
geom_point(aes(y = nonmon), colour = B, size = 1.5, alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, lty = "dotted") +
geom_smooth(method = "loess", aes(y = no_show), colour = "blue") +
geom_smooth(method = "loess", aes(y = nonmon), colour = "red") +
xlim(0, 0.4) + ylim(0, 0.4) +
labs(x = "Pr(Wasted Vote, Plurality)", y = "Pr(Voting Paradox, RCV)") +
scale_colour_manual(breaks = c(A, B), values = c("blue", "red"))
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show), colour = "A", size = 1.5, alpha = 0.2) +
geom_point(aes(y = nonmon), colour = "B", size = 1.5, alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, lty = "dotted") +
geom_smooth(method = "loess", aes(y = no_show), colour = "blue") +
geom_smooth(method = "loess", aes(y = nonmon), colour = "red") +
xlim(0, 0.4) + ylim(0, 0.4) +
labs(x = "Pr(Wasted Vote, Plurality)", y = "Pr(Voting Paradox, RCV)") +
scale_colour_manual(breaks = c("A", "B"), values = c("blue", "red"))
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show), colour = A, size = 1.5, alpha = 0.2) +
geom_point(aes(y = nonmon), colour = B, size = 1.5, alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, lty = "dotted") +
geom_smooth(method = "loess", aes(y = no_show), colour = "blue") +
geom_smooth(method = "loess", aes(y = nonmon), colour = "red") +
xlim(0, 0.4) + ylim(0, 0.4) +
labs(x = "Pr(Wasted Vote, Plurality)", y = "Pr(Voting Paradox, RCV)") +
scale_colour_manual(values = c(A = "blue", B = "red"))
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show), colour = "A", size = 1.5, alpha = 0.2) +
geom_point(aes(y = nonmon), colour = "B", size = 1.5, alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, lty = "dotted") +
geom_smooth(method = "loess", aes(y = no_show), colour = "blue") +
geom_smooth(method = "loess", aes(y = nonmon), colour = "red") +
xlim(0, 0.4) + ylim(0, 0.4) +
labs(x = "Pr(Wasted Vote, Plurality)", y = "Pr(Voting Paradox, RCV)") +
scale_colour_manual(values = c(A = "blue", B = "red"))
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show), colour = "A", size = 1.5, alpha = 0.2) +
geom_point(aes(y = nonmon), colour = "B", size = 1.5, alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, lty = "dotted") +
geom_smooth(method = "loess", aes(y = no_show), colour = "blue") +
geom_smooth(method = "loess", aes(y = nonmon), colour = "red") +
xlim(0, 0.4) + ylim(0, 0.4) +
labs(x = "Pr(Wasted Vote, Plurality)", y = "Pr(Voting Paradox, RCV)") +
scale_colour_manual(breaks = c("A", "B"), values = c(A = "blue", B = "red"))
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show), colour = "A", size = 1.5, alpha = 0.2) +
geom_point(aes(y = nonmon), colour = "B", size = 1.5, alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, lty = "dotted") +
geom_smooth(method = "loess", aes(y = no_show), colour = "blue") +
geom_smooth(method = "loess", aes(y = nonmon), colour = "red") +
xlim(0, 0.4) + ylim(0, 0.4) +
labs(x = "Pr(Wasted Vote, Plurality)", y = "Pr(Voting Paradox, RCV)") +
scale_colour_manual(breaks = c("A", "B"), values = c(A = "blue", B = "red")) +
theme_bw()
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show, colour = "A"), size = 1.5, alpha = 0.2) +
geom_point(aes(y = nonmon, colour = "B"), size = 1.5, alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, lty = "dotted") +
geom_smooth(method = "loess", aes(y = no_show), colour = "blue") +
geom_smooth(method = "loess", aes(y = nonmon), colour = "red") +
xlim(0, 0.4) + ylim(0, 0.4) +
labs(x = "Pr(Wasted Vote, Plurality)", y = "Pr(Voting Paradox, RCV)") +
scale_colour_manual(breaks = c("A", "B"), values = c(A = "blue", B = "red")) +
theme_bw()
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show, colour = "No-show"), size = 1.5, alpha = 0.2) +
geom_point(aes(y = nonmon, colour = "Non-mon"), size = 1.5, alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, lty = "dotted") +
geom_smooth(method = "loess", aes(y = no_show), colour = "blue") +
geom_smooth(method = "loess", aes(y = nonmon), colour = "red") +
xlim(0, 0.4) + ylim(0, 0.4) +
labs(x = "Pr(Wasted Vote, Plurality)", y = "Pr(Voting Paradox, RCV)") +
scale_colour_manual(breaks = c("No-show", "Non-mon"), values = c(A = "blue", B = "red")) +
theme_bw() +
theme(legend.position = "bottom", legend.direction = "horizontal")
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show, colour = "No-show"), size = 1.5, alpha = 0.2) +
geom_point(aes(y = nonmon, colour = "Non-mon"), size = 1.5, alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, lty = "dotted") +
geom_smooth(method = "loess", aes(y = no_show), colour = "blue") +
geom_smooth(method = "loess", aes(y = nonmon), colour = "red") +
xlim(0, 0.4) + ylim(0, 0.4) +
labs(x = "Pr(Wasted Vote, Plurality)", y = "Pr(Voting Paradox, RCV)") +
scale_colour_manual(breaks = c("No-show", "Non-mon"), values = c(No-show = "blue", Non-mon = "red")) +
theme_bw() +
theme(legend.position = "bottom", legend.direction = "horizontal")
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show, colour = "No-show"), size = 1.5, alpha = 0.2) +
geom_point(aes(y = nonmon, colour = "Non-mon"), size = 1.5, alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, lty = "dotted") +
geom_smooth(method = "loess", aes(y = no_show), colour = "blue") +
geom_smooth(method = "loess", aes(y = nonmon), colour = "red") +
xlim(0, 0.4) + ylim(0, 0.4) +
labs(x = "Pr(Wasted Vote, Plurality)", y = "Pr(Voting Paradox, RCV)") +
scale_colour_manual(breaks = c("No-show", "Non-mon"), values = c("No-show" = "blue", "Non-mon" = "red")) +
theme_bw() +
theme(legend.position = "bottom", legend.direction = "horizontal")
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show, colour = "No-show"), size = 1.5, alpha = 0.2) +
geom_point(aes(y = nonmon, colour = "Non-mon"), size = 1.5, alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, lty = "dotted") +
geom_smooth(method = "loess", aes(y = no_show), colour = "blue") +
geom_smooth(method = "loess", aes(y = nonmon), colour = "red") +
xlim(0, 0.4) + ylim(0, 0.4) +
labs(x = "Pr(Wasted Vote, Plurality)", y = "Pr(Voting Paradox, RCV)", colour = "Paradox tyep") +
scale_colour_manual(breaks = c("No-show", "Non-mon"), values = c("No-show" = "blue", "Non-mon" = "red")) +
theme_bw() +
theme(legend.position = "bottom", legend.direction = "horizontal")
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show, colour = "No-show"), size = 1.5, alpha = 0.2) +
geom_point(aes(y = nonmon, colour = "Non-mon"), size = 1.5, alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, lty = "dotted") +
geom_smooth(method = "loess", aes(y = no_show), colour = "blue") +
geom_smooth(method = "loess", aes(y = nonmon), colour = "red") +
xlim(0, 0.4) + ylim(0, 0.4) +
labs(x = "Pr(Wasted Vote, Plurality)", y = "Pr(Voting Paradox, RCV)", colour = "Paradox type") +
scale_colour_manual(breaks = c("No-show", "Non-mon"), values = c("No-show" = "blue", "Non-mon" = "red")) +
theme_bw() +
theme(legend.position = "bottom", legend.direction = "horizontal")
ggsave(here("../output/figures/paradoxes_cses.pdf"), height = 4, width = 4)
load(here("../output/mega_tau_list.Rdata"))
# Import AES and Ballot data
# Note that these are normalised utilities. To obtain like-dislike scores I will need to re-run the original script.
aes_utils <- read.csv(here("../data", "australia", "AES_utility.csv"))[, -1]
aes_utils <- aes_utils[, c("GRN", "LIB", "LAB")] #common ordering
# Import non-standardised utilities
aes_utils_raw <- read.csv(here("../data", "australia", "aes_nsw_full.csv"))[, -1]
nsw <- read.csv(here("../data/australia/nsw_ballots.csv"))[, -1]
resampling <- read.csv(here("../data/australia/nsw_resampling.csv"))[, -1]
# Create DF with ballotprofiles
const_bp <- data.frame(district = nsw$District,
AB = nsw$`GRN.LIB` + nsw$`GRN.LIB.LAB`,
AC = nsw$`GRN.LAB` + nsw$`GRN.LAB.LIB`,
BA = nsw$`LIB.GRN` + nsw$`LIB.GRN.LAB`,
BC = nsw$`LIB.LAB` + nsw$`LIB.LAB.GRN`,
CA = nsw$`LAB.GRN` + nsw$`LAB.GRN.LIB`,
CB = nsw$`LAB.LIB` + nsw$`LAB.LIB.GRN`,
A = nsw$GRN,
B = nsw$LIB,
C = nsw$LAB)
# For now, let's not use truncated ballots:
const_bp_no_trunc <- const_bp
const_bp_no_trunc[, 8:10] <- 0
const_bp_no_trunc[, 2:10] <- t(apply(const_bp_no_trunc[, 2:10], 1, function(x) x / sum(x)))
# Non-monotonicity under AV
nonmon_list <- c()
s <- 85
for(i in 1:nrow(const_bp)){
print(i)
v_vec <- as.numeric(const_bp[i, 2:10] / sum(const_bp[i, 2:10]))
pprobs <- av.pivotal.event.probs.general(v_vec, rep(s, 4))
nonmon_list[[i]] <- non_monoton(mega_tau_list[[i]], pprobs)
}
# Wasted vote under Plurality
wasted_list <- c()
for(i in 1:nrow(const_bp)){
print(i)
v_vec <- as.numeric(const_bp[i, 2:10] / sum(const_bp[i, 2:10]))
v_vec_three <- c(v_vec[1] + v_vec[2], v_vec[3] + v_vec[4], v_vec[5] + v_vec[6])
pprobs <- plurality.pivotal.probabilities(v_vec_three, s)
wasted_list[[i]] <- wasted_vote(mega_tau_list[[i]], pprobs)
}
paradox_df <- matrix(NA, ncol = 3, nrow = nrow(const_bp))
for(i in 1:nrow(const_bp)){
no_show <- nonmon_list[[i]]$no_show / nonmon_list[[i]]$total
nonmon <- (nonmon_list[[i]]$nonmon1 + nonmon_list[[i]]$nonmon2) / nonmon_list[[i]]$total
wasted <- wasted_list[[i]]$wasted / wasted_list[[i]]$total
paradox_df[i, ] <- c(no_show, nonmon, wasted)
}
paradox_df <- as.data.frame(paradox_df)
names(paradox_df) <- c("no_show", "nonmon", "wasted")
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show)) +
geom_point(aes(y = nonmon), colour = "blue") +
geom_abline(intercept = 0, slope = 1) +
xlim(0, 0.5) + ylim(0, 0.15)
mega_tau_list[[1]][mega_tau_list$s == 85]
mega_tau_list[[1]][mega_tau_list$s == 85, ]
mega_tau_list[[1]]
mega_tau_list[[1]][mega_tau_list$s == "85", ]
mega_tau_list[[1]][mega_tau_list[[1$s == 85, ]
mega_tau_list[[1]][mega_tau_list[[1]]$s == 85, ]
s <- 85
for(i in 1:nrow(const_bp)){
print(i)
v_vec <- as.numeric(const_bp[i, 2:10] / sum(const_bp[i, 2:10]))
pprobs <- av.pivotal.event.probs.general(v_vec, rep(s, 4))
nonmon_list[[i]] <- non_monoton(mega_tau_list[[i]][mega_tau_list[[i]]$s == 85, ], pprobs)
}
# Wasted vote under Plurality
wasted_list <- c()
for(i in 1:nrow(const_bp)){
print(i)
v_vec <- as.numeric(const_bp[i, 2:10] / sum(const_bp[i, 2:10]))
v_vec_three <- c(v_vec[1] + v_vec[2], v_vec[3] + v_vec[4], v_vec[5] + v_vec[6])
pprobs <- plurality.pivotal.probabilities(v_vec_three, s)
wasted_list[[i]] <- wasted_vote(mega_tau_list[[i]][mega_tau_list[[i]]$s == 85, ], pprobs)
}
paradox_df <- matrix(NA, ncol = 3, nrow = nrow(const_bp))
for(i in 1:nrow(const_bp)){
no_show <- nonmon_list[[i]]$no_show / nonmon_list[[i]]$total
nonmon <- (nonmon_list[[i]]$nonmon1 + nonmon_list[[i]]$nonmon2) / nonmon_list[[i]]$total
wasted <- wasted_list[[i]]$wasted / wasted_list[[i]]$total
paradox_df[i, ] <- c(no_show, nonmon, wasted)
}
paradox_df <- as.data.frame(paradox_df)
names(paradox_df) <- c("no_show", "nonmon", "wasted")
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show)) +
geom_point(aes(y = nonmon), colour = "blue") +
geom_abline(intercept = 0, slope = 1) +
xlim(0, 0.5) + ylim(0, 0.15)
wasted_list[[1]]
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show, colour = "No-show"), size = 1.5, alpha = 0.2) +
geom_point(aes(y = nonmon, colour = "Non-mon"), size = 1.5, alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, lty = "dotted") +
geom_smooth(method = "loess", aes(y = no_show), colour = "blue") +
geom_smooth(method = "loess", aes(y = nonmon), colour = "red") +
xlim(0, 0.4) + ylim(0, 0.4) +
labs(x = "Pr(Wasted Vote, Plurality)", y = "Pr(Voting Paradox, RCV)", colour = "Paradox type") +
scale_colour_manual(breaks = c("No-show", "Non-mon"), values = c("No-show" = "blue", "Non-mon" = "red")) +
theme_bw() +
theme(legend.position = "bottom", legend.direction = "horizontal")
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show, colour = "No-show"), size = 1.5, alpha = 0.2) +
geom_point(aes(y = nonmon, colour = "Non-mon"), size = 1.5, alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, lty = "dotted") +
geom_smooth(method = "loess", aes(y = no_show), colour = "blue") +
geom_smooth(method = "loess", aes(y = nonmon), colour = "red") +
xlim(0, 0.7) + ylim(0, 0.4) +
labs(x = "Pr(Wasted Vote, Plurality)", y = "Pr(Voting Paradox, RCV)", colour = "Paradox type") +
scale_colour_manual(breaks = c("No-show", "Non-mon"), values = c("No-show" = "blue", "Non-mon" = "red")) +
theme_bw() +
theme(legend.position = "bottom", legend.direction = "horizontal")
nonmon_list <- c()
s <- 15
for(i in 1:nrow(const_bp)){
print(i)
v_vec <- as.numeric(const_bp[i, 2:10] / sum(const_bp[i, 2:10]))
pprobs <- av.pivotal.event.probs.general(v_vec, rep(s, 4))
nonmon_list[[i]] <- non_monoton(mega_tau_list[[i]][mega_tau_list[[i]]$s == s, ], pprobs)
}
# Wasted vote under Plurality
wasted_list <- c()
for(i in 1:nrow(const_bp)){
print(i)
v_vec <- as.numeric(const_bp[i, 2:10] / sum(const_bp[i, 2:10]))
v_vec_three <- c(v_vec[1] + v_vec[2], v_vec[3] + v_vec[4], v_vec[5] + v_vec[6])
pprobs <- plurality.pivotal.probabilities(v_vec_three, s)
wasted_list[[i]] <- wasted_vote(mega_tau_list[[i]][mega_tau_list[[i]]$s == s, ], pprobs)
}
paradox_df <- matrix(NA, ncol = 3, nrow = nrow(const_bp))
for(i in 1:nrow(const_bp)){
no_show <- nonmon_list[[i]]$no_show / nonmon_list[[i]]$total
nonmon <- (nonmon_list[[i]]$nonmon1 + nonmon_list[[i]]$nonmon2) / nonmon_list[[i]]$total
wasted <- wasted_list[[i]]$wasted / wasted_list[[i]]$total
paradox_df[i, ] <- c(no_show, nonmon, wasted)
}
paradox_df <- as.data.frame(paradox_df)
names(paradox_df) <- c("no_show", "nonmon", "wasted")
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show, colour = "No-show"), size = 1.5, alpha = 0.2) +
geom_point(aes(y = nonmon, colour = "Non-mon"), size = 1.5, alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, lty = "dotted") +
geom_smooth(method = "loess", aes(y = no_show), colour = "blue") +
geom_smooth(method = "loess", aes(y = nonmon), colour = "red") +
xlim(0, 0.7) + ylim(0, 0.4) +
labs(x = "Pr(Wasted Vote, Plurality)", y = "Pr(Voting Paradox, RCV)", colour = "Paradox type") +
scale_colour_manual(breaks = c("No-show", "Non-mon"), values = c("No-show" = "blue", "Non-mon" = "red")) +
theme_bw() +
theme(legend.position = "bottom", legend.direction = "horizontal")
wasted_list <- c()
for(i in 1:nrow(const_bp)){
print(i)
v_vec <- as.numeric(const_bp[i, 2:10] / sum(const_bp[i, 2:10]))
v_vec_three <- c(v_vec[1] + v_vec[2] + v_vec[7], v_vec[3] + v_vec[4] + v_vec[8], v_vec[5] + v_vec[6] + v_vec[9])
pprobs <- plurality.pivotal.probabilities(v_vec_three, s)
wasted_list[[i]] <- wasted_vote(mega_tau_list[[i]][mega_tau_list[[i]]$s == s, ], pprobs)
}
paradox_df <- matrix(NA, ncol = 3, nrow = nrow(const_bp))
for(i in 1:nrow(const_bp)){
no_show <- nonmon_list[[i]]$no_show / nonmon_list[[i]]$total
nonmon <- (nonmon_list[[i]]$nonmon1 + nonmon_list[[i]]$nonmon2) / nonmon_list[[i]]$total
wasted <- wasted_list[[i]]$wasted / wasted_list[[i]]$total
paradox_df[i, ] <- c(no_show, nonmon, wasted)
}
paradox_df <- as.data.frame(paradox_df)
names(paradox_df) <- c("no_show", "nonmon", "wasted")
ggplot(paradox_df, aes(x = wasted)) +
geom_point(aes(y = no_show, colour = "No-show"), size = 1.5, alpha = 0.2) +
geom_point(aes(y = nonmon, colour = "Non-mon"), size = 1.5, alpha = 0.2) +
geom_abline(intercept = 0, slope = 1, lty = "dotted") +
geom_smooth(method = "loess", aes(y = no_show), colour = "blue") +
geom_smooth(method = "loess", aes(y = nonmon), colour = "red") +
xlim(0, 0.7) + ylim(0, 0.4) +
labs(x = "Pr(Wasted Vote, Plurality)", y = "Pr(Voting Paradox, RCV)", colour = "Paradox type") +
scale_colour_manual(breaks = c("No-show", "Non-mon"), values = c("No-show" = "blue", "Non-mon" = "red")) +
theme_bw() +
theme(legend.position = "bottom", legend.direction = "horizontal")
ggsave(here("../output/figures/paradoxes_aus.pdf"), width = 4, height = 4)
