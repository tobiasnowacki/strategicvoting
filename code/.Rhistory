library(reshape2)
library(dplyr)
library(purrr)
library(ggtern)
library(plotly)
ggplot(v_vec_df, aes(ABC)) +
geom_point()
ggplot(v_vec_df, aes(ABC)) +
geom_density()
ggplot(v_vec_df) +
geom_density(aes(ABC)) +
geom_density(aes(ACB), lty = "dotted")
ggplot(v_vec_df) +
geom_density(aes(BAC)) +
geom_density(aes(BCA), lty = "dotted")
ggplot(v_vec_df) +
geom_density(aes(CAB)) +
geom_density(aes(CBA), lty = "dotted")
?gather
v_vec_df_long <- gather(v_vec_df)
library(tidyr)
v_vec_df_long <- gather(v_vec_df)
ggplot(v_vec_df_long) +
geom_density(aes(value)) +
facet_wrap(~ key)
##################################################
## Project: Strategic Voting in RCV
## Script purpose: Checking theoretical predictions
## Date: 19/12/2018
## Author:
##################################################
###
### Dependencies
###
library(here)
library(gtools)
library(ggtern)
library(stargazer)
library(tidyr)
source(here("utils/functions.r"))
source(here("utils", "av_pivotal_probs_analytical_general_v2.r"))
sim_appr2 <- here("utils", "general_iteration_simulation_approach.r")
source(sim_appr2)
sv_file <-  here("utils/sv.r")
source(sv_file)
source(here("utils", "plot_results_on_ternary_mirror.r"))
load(here("..", "output", "cses_big_list_2.RData"))
###
### Analysis
###
# Create list with v_vecs from CSES utility dfs:
big_list_na_omit <- lapply(big_list, function(x) remove_nas(x))
sin_vote_list <- lapply(big_list_na_omit, function(x) sincere.vote.mat.from.U(x$U, rule = "AV"))
v_vec_list <- list()
for(i in 1:length(sin_vote_list)){
weights <- big_list_na_omit[[i]]$weights
v_vec <- ballot.props.from.vote.mat.and.weights(sin_vote_list[[i]], weights)
big_list_na_omit[[i]]$v_vec <- as.numeric(v_vec)
}
# Drop NA cases
names(big_list)[[39]]
names(big_list)[[145]]
big_list_na_omit[[39]] <- NULL
big_list_na_omit[[144]] <- NULL
# Set level of uncertainty
s <- 85
# For each case:
# 1. get v.vec
# 1. get "transition matrix"
# 2. get pivotal probabilities
results <- list()
for(i in 1:length(big_list_na_omit)){
print(i)
this_list <- big_list_na_omit[[i]]
pprobs <- av.pivotal.event.probs.general(
c(this_list$v_vec, 0, 0, 0),
rep(s, 4)
)
class <- classify.vec(this_list$v_vec)
sv_obj <- convert_andy_to_sv_item_two(
this_list$U,
this_list$weights,
s,
this_list$v_vec)
trans_matrix <- vote_matrix_weighted(
sv_obj,
type = "rcv",
weights = big_list_na_omit[[i]]$weights
)
results[[i]] <- list(this_list$v_vec, pprobs, sv_obj, trans_matrix, class)
}
# Mapping cases
names(big_list_na_omit)
?tail
# Mapping cases
sapply(names(big_list_na_omit), function(x) head(x, 3))
head(names(big_list_na_omit), 3)
# Mapping cases
lapply(names(big_list_na_omit), function(x) head(x, 3))
?head
# Mapping cases
sapply(names(big_list_na_omit), function(x) substr(x, 1, 3))
# Mapping cases
cntry <- sapply(names(big_list_na_omit), function(x) substr(x, 1, 3))
table(cntry)
library(rworldmap)
install.packages("rworldmap")
library(rworldmap)
cntry_list <- table(cntry)
cntry_list <- as.data.frame(table(cntry))
joinCountryData2Map(cntry_list, joinCode = "ISO3", nameJoinColumn = "cntry")
joinCountryData2Map(cntry_list, joinCode = "ISO", nameJoinColumn = "cntry")
joinCountryData2Map(cntry_list, joinCode = "UN", nameJoinColumn = "cntry")
joinCountryData2Map(cntry_list, joinCode = "ISO", nameJoinColumn = "cntry")
joinCountryData2Map(cntry_list, joinCode = "ISO2", nameJoinColumn = "cntry")
joinCountryData2Map(cntry_list, joinCode = "ISO3", nameJoinColumn = "cntry")
map_df <- joinCountryData2Map(cntry_list, joinCode = "ISO3", nameJoinColumn = "cntry")
mapCountryData(map_df)
map_df <- joinCountryData2Map(cntry_list, joinCode = "ISO3", nameJoinColumn = "cntry")
mapCountryData(map_df, nameColumnToPlot = "Freq")
cntry_list
mapCountryData(map_df, nameColumnToPlot = "Freq", mapTitle = "Number of cases by country")
mapCountryData(map_df, nameColumnToPlot = "Freq", catMethod = "categorical", mapTitle = "Number of cases by country")
pdf(here("../output/figures/case_map.pdf"))
mapCountryData(map_df, nameColumnToPlot = "Freq", catMethod = "categorical", mapTitle = "Number of cases by country")
dev.off()
# Set WD etc.
library(here)
# Load pivotal probability functions:
av_piv_path <- here("utils/av_pivotal_probs_analytical_general_v2.r")
source(av_piv_path)
plur_piv_path <- here("utils/plurality_pivotal_probabilities_analytical.r")
source(plur_piv_path)
# To replicate Andy's function(s):
sim_appr2 <- here("utils", "general_iteration_simulation_approach.r")
source(sim_appr2)
sv_file <-  here("utils/sv.r")
source(sv_file)
# Load my own functions:
functions <- here("utils/functions.r")
source(functions)
# Load necessary libraries:
library(ggplot2)
library(reshape2)
library(dplyr)
library(purrr)
library(ggtern)
# Load CSES data:
load(here("../output/cses_big_list_2.RData"))
remove_nas <- function(x){
mat <- cbind(x$U, x$weights)
mat <- na.omit(mat)
return(list(U = mat[, 1:3], weights = as.numeric(mat[, 4])))
}
create_v_vec <- function(x){
x$U <- x$U + runif(nrow(x$U) * ncol(x$U), min = 0, max = 0.001)
sin_vote <- as.numeric(apply(x$U, 1, function(x) sin_vote_scalar(x)))
num_list <- c(1:6)
sin_df <- (sapply(num_list, function(x) as.numeric(sin_vote == x)))
sin_df <- sin_df * x$weights
sin_vec <- colSums(sin_df)
return(sin_vec / sum(sin_vec))
}
# Create list with v_vecs from CSES utility dfs:
big_list_na_omit <- lapply(big_list, function(x) remove_nas(x))
sin_vote_list <- lapply(big_list_na_omit, function(x) sincere.vote.mat.from.U(x$U, rule = "AV"))
v_vec_list <- list()
for(i in 1:length(sin_vote_list)){
weights <- big_list_na_omit[[i]]$weights
v_vec <- ballot.props.from.vote.mat.and.weights(sin_vote_list[[i]], weights)
big_list_na_omit[[i]]$v_vec <- as.numeric(v_vec)
}
# Set list of s values
s_list <- as.list(c(15, 30, 45, 60, 75, 85, 90))
# Drop NA cases
names(big_list)[[39]]
names(big_list)[[145]]
big_list_na_omit[[39]] <- NULL
big_list_na_omit[[144]] <- NULL
# Loop that creates the tau objects
# uses my own function -- see below for faster implementation
# sv_list <- list()
# for(i in 1:length(big_list_na_omit)){
#   print(i)
#   sv_list[[i]] <- return_sv_tau(c(big_list_na_omit[[i]]$v_vec, 0, 0, 0), big_list_na_omit[[i]]$U, s_list)
# }
###
### DESCRIPTIVE
###
v_vec_df <- matrix(NA, nrow = 160, ncol = 6)
simplex_df <- matrix(NA, nrow = 160, ncol = 3)
for(i in 1:length(big_list_na_omit)){
v_vec <- big_list_na_omit[[i]]$v_vec
simplex_vec <- c(v_vec[1] + v_vec[2], v_vec[3] + v_vec[4], v_vec[5] + v_vec[6])
v_vec_df[i, ] <- as.numeric(v_vec)
simplex_df[i, ] <- simplex_vec
}
simplex_df <- as.data.frame(simplex_df)
names(simplex_df) <- c("A", "B", "C")
ggtern(simplex_df, aes(A, B, C)) +
geom_point()
# Distribution of second preferences
second_prefs <- data.frame(mAB = v_vec_df[, 1] / (v_vec_df[, 1] + v_vec_df[, 2]), mBA = v_vec_df[, 3] / (v_vec_df[, 3] + v_vec_df[, 4]), mCB = v_vec_df[, 6] / (v_vec_df[, 5] + v_vec_df[, 6]))
ggplot(second_prefs, aes(mAB, mCB)) +
geom_point() +
geom_smooth(method = "loess")
theme_bw()
# save(file = here("../output/sv_list.Rdata"), sv_list)
load(here("../output/sv_list.Rdata"))
qq_mega_list <- list()
for(i in 1:length(sv_list)){
print(i)
x <- sv_list[[i]]
utils <- big_list_na_omit[[i]]$U
case <- names(big_list_na_omit)[[i]]
qq <- qq_function_two(x, utils)
qq$case <- case
qq_mega_list[[i]] <- qq
}
qq_mega_df <- as.data.frame(do.call(rbind, qq_mega_list))
qq_mega_by_s <- split(qq_mega_df, qq_mega_df$s)
qq_agg <- lapply(as.list(names(qq_mega_by_s)), function(s) {
z <- qq_mega_by_s[[s]]
df <- as.data.frame(qqplot(x = z$x, y = z$y, plot.it = FALSE))
df$s <- rep(s, nrow(df))
return(df)
})
qq_agg_df <- as.data.frame(do.call(rbind, qq_agg))
sv_list <- list()
for(i in 1:length(big_list_na_omit)){
print(i)
this_list <- big_list_na_omit[[i]]
df_list <- lapply(s_list, function(x) convert_andy_to_sv_item_two(this_list$U, this_list$weights, x, this_list$v_vec))
df <- as.data.frame(do.call(rbind, df_list))
df$case <- names(big_list_na_omit)[[i]]
#df <- apply(df, 2, as.numeric)
sv_list[[i]] <- df
}
save(file = here("../output/sv_list.Rdata"), sv_list)
qq_mega_list <- list()
for(i in 1:length(sv_list)){
print(i)
x <- sv_list[[i]]
utils <- big_list_na_omit[[i]]$U
case <- names(big_list_na_omit)[[i]]
qq <- qq_function_two(x, utils)
qq$case <- case
qq_mega_list[[i]] <- qq
}
qq_mega_df <- as.data.frame(do.call(rbind, qq_mega_list))
qq_mega_by_s <- split(qq_mega_df, qq_mega_df$s)
qq_agg <- lapply(as.list(names(qq_mega_by_s)), function(s) {
z <- qq_mega_by_s[[s]]
df <- as.data.frame(qqplot(x = z$x, y = z$y, plot.it = FALSE))
df$s <- rep(s, nrow(df))
return(df)
})
qq_agg_df <- as.data.frame(do.call(rbind, qq_agg))
cses_qq <- ggplot(qq_mega_df, aes(x = x, y = y)) +
geom_line(aes(x = x, y = y, group = case), alpha = 0.1) +
geom_line(data = qq_agg_df, aes(x = x, y = y), colour = "red", lwd = 2) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", colour = "blue") +
theme_bw()  +
facet_wrap(vars(s)) +
xlim(-30, 30) + ylim(-30, 30)
ggsave(here("../output/figures/cses_qq.pdf"), cses_qq, width = 9, height = 6)
cses_qq <- ggplot(qq_mega_df, aes(x = x, y = y)) +
geom_line(aes(x = x, y = y, group = case), alpha = 0.1) +
geom_line(data = qq_agg_df, aes(x = x, y = y), colour = "red", lwd = 2) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", colour = "blue") +
theme_bw()  +
facet_wrap(vars(s), ncol= 4) +
xlim(-30, 30) + ylim(-30, 30)
ggsave(here("../output/figures/cses_qq.pdf"), cses_qq, width = 9, height = 6)
# (1) Proportion of optimal strategic votes
prop_list <- list()
for(i in 1:length(sv_list)){
print(i)
prop_list[[i]] <- sv_prop(sv_list[[i]], big_list_na_omit[[i]]$weights)
df <- as.data.frame(prop_list[[i]])
df$case <- as.character(names(big_list_na_omit)[[i]])
df$s <- as.numeric(s_list)
n <- apply(df[, 1:3], 1, function(x) sum(x))
df[, 1:5] <- df[, 1:5] / sum(big_list_na_omit[[i]]$weights)
prop_list[[i]] <- df
}
prop_df <- do.call(rbind, prop_list)
names(prop_df)[1:5] <- c("rcv_first", "rcv_second", "rcv_third", "plur_first", "plur_second")
prop_df_long <- melt(prop_df[, c(2, 3, 5, 6, 7)], id.vars = c("case", "s"))
prop_df_agg <- as.data.frame(prop_df_long %>%
group_by(variable, s) %>%
summarize(mean(value)))
names(prop_df_agg)[3] <- "value"
cses_prop <- ggplot(prop_df_long, aes(x = s, y = value)) +
geom_line(aes(colour = variable, group = interaction(case, variable)), alpha = 0.05) +
geom_line(data = prop_df_agg, aes(colour = variable, group = variable, x = s, y = value),
size = 2) +
labs(x = "Information (s)",
y = "Proportion of voters in CSES (case) casting ballot type",
colour = "Ballot order") +
theme_bw() +
# scale_color_manual(values = c("lime green", "blue", "red")) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0.1, 0), limits = c(0, 0.5)) +
theme(legend.position = "bottom", legend.direction = "vertical")
ggsave(here("../output/figures/cses_freq.pdf"), cses_prop, height = 5, width = 4)
# (2) Distribution of incentives (in scatterplot)
prop_df$inc_rcv <- prop_df$rcv_second + prop_df$rcv_third
prop_df$inc_plur <- prop_df$plur_second
cses_inc <- ggplot(prop_df, aes(x = inc_plur, y = inc_rcv)) +
geom_point(alpha = 0.1) +
geom_abline(slope = 1, intercept = 0) +
facet_wrap(~ s, ncol = 4) +
theme_bw() +
scale_x_continuous(limits = c(0, 0.7), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 0.7), expand = c(0, 0)) +
labs(x = "Proportion of CSES respondents with positive SI under Plurality",
y = "Proportion of CSES respondents with positive SI under RCV")
ggsave(here("../output/figures/cses_prop.pdf"), cses_inc, width = 9, height = 6)
?floor
gen_v_zero <- function(sin_rcv){
v_zero_mat_rcv <- matrix(0, nrow = length(sin_rcv), ncol = 6)
v_zero_mat_plur <- matrix(0, nrow = length(sin_rcv), ncol = 3)
sin_plur <- sin_vote_plur_transform(sin_rcv)
for(i in 1:length(sin_rcv)){
v_zero_mat_rcv[i, sin_rcv[i]] <- 1
v_zero_mat_plur[i, sin_plur[i]] <- 1
}
}
gen_v_zero(sv_list[[1]]$sin_rcv)
gen_v_zero <- function(sin_rcv){
v_zero_mat_rcv <- matrix(0, nrow = length(sin_rcv), ncol = 6)
v_zero_mat_plur <- matrix(0, nrow = length(sin_rcv), ncol = 3)
sin_plur <- sin_vote_plur_transform(sin_rcv)
for(i in 1:length(sin_rcv)){
v_zero_mat_rcv[i, sin_rcv[i]] <- 1
v_zero_mat_plur[i, sin_plur[i]] <- 1
}
return(list(v_zero_mat_rcv, v_zero_mat_plur))
}
gen_v_zero(sv_list[[1]]$sin_rcv)
for(i in 1:1){
v_zero <- gen_v_zero(sv_list[[i]]$sin_rcv)
out <- evaluate_success_of_CW_given_U_and_V.mat(big_list_na_omit[[i]]$U, v_zero, lambdas = c(.1, .2, .3, .4, .5), big_list_na_omit[[i]]$weights, rule = "AV", m = 300, M = 1000)
}
for(i in 1:1){
v_zero <- gen_v_zero(sv_list[[i]]$sin_rcv)
out <- evaluate_success_of_CW_given_U_and_V.mat(U = big_list_na_omit[[i]]$U, V.mat = v_zero, lambdas = c(.1, .2, .3, .4, .5), big_list_na_omit[[i]]$weights, rule = "AV", m = 300, M = 1000)
}
sincere.vote.mat.from.U()
sincere.vote.mat.from.U(big_list_na_omit[[1]]$U, "AV")
for(i in 1:1){
v_zero <- gen_v_zero(sv_list[[i]]$sin_rcv)
v_opt_rcv <- gen_v_zero(sv_list[[i]]$opt_rcv)[[1]]
v_opt_plur <- gen_v_zero(sv_list[[i]]$opt_plur[[2]])
out <- evaluate_success_of_CW_given_U_and_V.mat(U = big_list_na_omit[[i]]$U, V.mat = v_opt_rcv, V0 = v_zero[[1]], lambdas = c(.1, .2, .3, .4, .5), big_list_na_omit[[i]]$weights, rule = "AV", m = 300, M = 1000)
}
v_opt_rcv
for(i in 1:1){
v_zero <- gen_v_zero(sv_list[[i]]$sin_rcv[sv_list[[i]]$s == 85])
v_opt_rcv <- gen_v_zero(sv_list[[i]]$opt_rcv[sv_list[[i]]$s == 85])[[1]]
v_opt_plur <- gen_v_zero(sv_list[[i]]$opt_plur[sv_list[[i]]$s == 85])[[2]]
out <- evaluate_success_of_CW_given_U_and_V.mat(U = big_list_na_omit[[i]]$U, V.mat = v_opt_rcv, V0 = v_zero[[1]], lambdas = c(.1, .2, .3, .4, .5), big_list_na_omit[[i]]$weights, rule = "AV", m = 300, M = 1000)
}
out
for(i in 1:1){
v_zero <- gen_v_zero(sv_list[[i]]$sin_rcv[sv_list[[i]]$s == 85])
v_opt_rcv <- gen_v_zero(sv_list[[i]]$opt_rcv[sv_list[[i]]$s == 85])[[1]]
v_opt_plur <- gen_v_zero(sv_list[[i]]$opt_plur[sv_list[[i]]$s == 85])[[2]]
out_rcv <- evaluate_success_of_CW_given_U_and_V.mat(U = big_list_na_omit[[i]]$U, V.mat = v_opt_rcv, V0 = v_zero[[1]], lambdas = c(.1, .2, .3, .4, .5), big_list_na_omit[[i]]$weights, rule = "AV", m = 300, M = 1000)
out_plur <- evaluate_success_of_CW_given_U_and_V.mat(U = big_list_na_omit[[i]]$U, V.mat = v_opt_plur, V0 = v_zero[[2]], lambdas = c(.1, .2, .3, .4, .5), big_list_na_omit[[i]]$weights, rule = "plurality", m = 300, M = 1000)
}
cw_win_rcv <- list()
cw_win_plur <- list()
for(i in 1:length(sv_list)){
v_zero <- gen_v_zero(sv_list[[i]]$sin_rcv[sv_list[[i]]$s == 85])
v_opt_rcv <- gen_v_zero(sv_list[[i]]$opt_rcv[sv_list[[i]]$s == 85])[[1]]
v_opt_plur <- gen_v_zero(sv_list[[i]]$opt_plur[sv_list[[i]]$s == 85])[[2]]
cw_win_rcv[[i]] <- evaluate_success_of_CW_given_U_and_V.mat(U = big_list_na_omit[[i]]$U, V.mat = v_opt_rcv, V0 = v_zero[[1]], lambdas = c(.1, .2, .3, .4, .5), big_list_na_omit[[i]]$weights, rule = "AV", m = 300, M = 1000)
cw_win_plur[[i]] <- evaluate_success_of_CW_given_U_and_V.mat(U = big_list_na_omit[[i]]$U, V.mat = v_opt_plur, V0 = v_zero[[2]], lambdas = c(.1, .2, .3, .4, .5), big_list_na_omit[[i]]$weights, rule = "plurality", m = 300, M = 1000)
}
cw_win_rcv <- list()
cw_win_plur <- list()
for(i in 1:length(sv_list)){
print(i)
v_zero <- gen_v_zero(sv_list[[i]]$sin_rcv[sv_list[[i]]$s == 85])
v_opt_rcv <- gen_v_zero(sv_list[[i]]$opt_rcv[sv_list[[i]]$s == 85])[[1]]
v_opt_plur <- gen_v_zero(sv_list[[i]]$opt_plur[sv_list[[i]]$s == 85])[[2]]
cw_win_rcv[[i]] <- evaluate_success_of_CW_given_U_and_V.mat(U = big_list_na_omit[[i]]$U, V.mat = v_opt_rcv, V0 = v_zero[[1]], lambdas = c(.1, .2, .3, .4, .5), big_list_na_omit[[i]]$weights, rule = "AV", m = 300, M = 1000)
cw_win_plur[[i]] <- evaluate_success_of_CW_given_U_and_V.mat(U = big_list_na_omit[[i]]$U, V.mat = v_opt_plur, V0 = v_zero[[2]], lambdas = c(.1, .2, .3, .4, .5), big_list_na_omit[[i]]$weights, rule = "plurality", m = 300, M = 1000)
}
cv_win_rcv[[2]]
cw_win_rcv[[2]]
# Plot
cw_df <- do.call(rbind, cw_win_rcv)
cw_df
# Plot
cw_df <- cbind(do.call(rbind, cw_win_rcv), do.call(rbind, cw_win_plur))
head(cw_df)
cw_df_plur <- as.data.frame(do.call(rbind, cw_win_plur))
# Plot
cw_df_rcv <- as.data.frame(do.call(rbind, cw_win_rcv))
cw_df_plur <- as.data.frame(do.call(rbind, cw_win_plur))
cw_df_rcv$case <- names(big_list_na_omit)
cw_df_plur$case <- names(big_list_na_omit)
?reshape
library(tidyr)
?melt
?tidyr
?tidyr
?melt
cw_df_rcv <- melt(cw_df_rcv, 1:5)
head(cw_df_rcv)
cw_df_rcv <- as.data.frame(do.call(rbind, cw_win_rcv))
cw_df_plur <- as.data.frame(do.call(rbind, cw_win_plur))
cw_df_rcv$case <- names(big_list_na_omit)
cw_df_plur$case <- names(big_list_na_omit)
names(cw_df_rcv)[1:5] <- c("0.1", "0.2", "0.3", "0.4", "0.5")
names(cw_df_plur)[1:5] <- c("0.1", "0.2", "0.3", "0.4", "0.5")
head(cw_df_rcv)
cw_df_rcv <- melt(cw_df_rcv, 6)
head(cw_df_rcv)
cw_df_plur <- melt(cw_df_plur, 6)
ggplot(cw_df_rcv, aes(variable, value)) +
geom_line(aes(group = case))
ggplot(cw_df_rcv, aes(variable, value)) +
geom_line(aes(group = case), alpha = 0.1)
cw_df <- rbind(cw_df_rcv, cw_df_plur)
ggplot(cw_df_rcv, aes(variable, value)) +
geom_line(aes(group = case, colour = type), alpha = 0.1)
cw_df_rcv <- as.data.frame(do.call(rbind, cw_win_rcv))
cw_df_plur <- as.data.frame(do.call(rbind, cw_win_plur))
cw_df_rcv$case <- names(big_list_na_omit)
cw_df_plur$case <- names(big_list_na_omit)
names(cw_df_rcv)[1:5] <- c("0.1", "0.2", "0.3", "0.4", "0.5")
names(cw_df_plur)[1:5] <- c("0.1", "0.2", "0.3", "0.4", "0.5")
cw_df_rcv <- melt(cw_df_rcv, 6)
cw_df_rcv$type <- "RCV"
cw_df_plur <- melt(cw_df_plur, 6)
cw_df_plur$type <- "Plurality"
cw_df <- rbind(cw_df_rcv, cw_df_plur)
ggplot(cw_df, aes(variable, value)) +
geom_line(aes(group = case, colour = type), alpha = 0.1)
head(cw_df)
ggplot(cw_df, aes(variable, value)) +
geom_line(aes(group = interaction(case, type), colour = type), alpha = 0.1)
ggplot(cw_df, aes(variable, value)) +
geom_line(aes(group = interaction(case, type), colour = type), alpha = 0.3)
ggplot(cw_df, aes(variable, value)) +
geom_line(aes(group = interaction(case, type), colour = type), alpha = 0.3) +
labs(x = "lambda", y = "Pr(Condorcet Winner NOT elected)")
ggplot(cw_df, aes(variable, value)) +
geom_line(aes(group = interaction(case, type), colour = type), alpha = 0.3) +
labs(x = "lambda", y = "Pr(Condorcet Winner NOT elected)") +
theme_bw()
ggplot(cw_df, aes(variable, value)) +
geom_line(aes(group = interaction(case, type), colour = type), alpha = 0.3) +
labs(x = "lambda", y = "Pr(Condorcet Winner NOT elected)") +
theme_bw()
ggsave(here("../output/figures/condorcet_probs.pdf"), width = 6, height = 6)
cw_df_agg <- cw_df %>% group_by(type, lambda)
head(cw_df)
cw_df_agg <- cw_df %>% group_by(type, variable)
head(cw_df_agg)
cw_df_agg <- cw_df %>% group_by(type, variable) %>% summarise(mean(value))
head(cw_df_agg)
ggplot(cw_df, aes(variable, value)) +
geom_line(aes(group = interaction(case, type), colour = type), alpha = 0.3) +
geom_line(data = cw_df_agg, lwd = 2)
ggplot(cw_df, aes(variable, value)) +
geom_line(aes(group = interaction(case, type), colour = type), alpha = 0.3) +
geom_line(data = cw_df_agg, lwd = 2) +
labs(x = "lambda", y = "Pr(Condorcet Winner NOT elected)") +
theme_bw()
ggplot(cw_df, aes(variable, value)) +
geom_line(aes(group = interaction(case, type), colour = type), alpha = 0.3) +
geom_line(data = cw_df_agg, lwd = 2) +
labs(x = "lambda", y = "Pr(Condorcet Winner NOT elected)") +
theme_bw()
names(cw_df_agg)[3] <- "value"
ggplot(cw_df, aes(variable, value)) +
geom_line(aes(group = interaction(case, type), colour = type), alpha = 0.3) +
geom_line(data = cw_df_agg, lwd = 2) +
labs(x = "lambda", y = "Pr(Condorcet Winner NOT elected)") +
theme_bw()
ggplot(cw_df, aes(variable, value)) +
geom_line(aes(group = interaction(case, type), colour = type), alpha = 0.3) +
geom_line(data = cw_df_agg, aes(group = type) lwd = 2) +
labs(x = "lambda", y = "Pr(Condorcet Winner NOT elected)") +
theme_bw()
ggplot(cw_df, aes(variable, value)) +
geom_line(aes(group = interaction(case, type), colour = type), alpha = 0.3) +
geom_line(data = cw_df_agg, aes(group = type), lwd = 2) +
labs(x = "lambda", y = "Pr(Condorcet Winner NOT elected)") +
theme_bw()
ggplot(cw_df, aes(variable, value)) +
geom_line(aes(group = interaction(case, type), colour = type), alpha = 0.3) +
geom_line(data = cw_df_agg, aes(group = type, colour = type), lwd = 2) +
labs(x = "lambda", y = "Pr(Condorcet Winner NOT elected)") +
theme_bw()
ggplot(cw_df, aes(variable, value)) +
geom_line(aes(group = interaction(case, type), colour = type), alpha = 0.2) +
geom_line(data = cw_df_agg, aes(group = type, colour = type), lwd = 2) +
labs(x = "lambda", y = "Pr(Condorcet Winner NOT elected)") +
theme_bw()
ggsave(here("../output/figures/condorcet_probs.pdf"), width = 6, height = 6)
ggplot(cw_df, aes(variable, value)) +
geom_line(aes(group = interaction(case, type), colour = type), alpha = 0.2) +
geom_line(data = cw_df_agg, aes(group = type, colour = type), lwd = 2) +
labs(x = "lambda", y = "Pr(Condorcet Winner elected)") +
theme_bw()
ggsave(here("../output/figures/condorcet_probs.pdf"), width = 6, height = 6)
