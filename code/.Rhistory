prop_plur <- sum(sv_obj_plur$weights[!is.na(sv_obj_plur$tau) & sv_obj_plur$tau > 0]) / sum(sv_obj_plur$weights[!is.na(sv_obj$tau)])
andy_list_prop[[i]] <- c(prop_av, prop_plur)
}
andy_list_prop
andy_list_prop_df <- do.call(rbind, andy_list_prop)
head(andy_list_prop_df)
head(prop_df_alt)
plot(andy_list_prop_df)
plot(andy_list_prop_df[, 2], andy_list_prop_df[, 1])
plot(prop_df_alt[, 2], prop_df_alt[, 1])
plot(prop_df_alt[, 2], prop_df_alt[, 1])
plot(andy_list_prop_df[, 2], andy_list_prop_df[, 1])
plot(andy_list_prop_df[, 2], andy_list_prop_df[, 1])
plot(prop_df_alt[, 2], prop_df_alt[, 1])
head(prop_df)
head(prop_df[prop_df$s == 60])
head(prop_df[, prop_df$s == 60])
head(prop_df[prop_df$s == 60, ])
# Distribution of incentives
prop_df$inc_rcv <- prop_df$rcv_sec + prop_df$rcv_third
prop_df$inc_plur <- prop_df$plur_sec
head(prop_df[prop_df$s == 60, ])
# compare:
andy_list_prop_df == prop_df[prop_df$s == 60, c(8, 9)]
head(andy_list_prop_df)
head(prop_df[prop_df$s == 60, ])
prop_df[prop_df$s == 60, 9]
andy_list_prop_df[, 2]
andy_list_prop_df[, 2] == prop_df[prop_df$s == 60, 9]
andy_list_prop_df[!is.na(andy_list_prop_df), 2] == prop_df[prop_df$s == 60, 9]
andy_list_prop_df[!is.na(andy_list_prop_df[, 2]), 2] == prop_df[prop_df$s == 60, 9]
andy_list_prop_df[!is.na(andy_list_prop_df[, 2]), 2][7]
prop_df[prop_df$s == 60, 9][7]
prop_df[prop_df$s == 60, 9][7] == andy_list_prop_df[!is.na(andy_list_prop_df[, 2]), 2][7]
prop_df[prop_df$s == 60, 9][109]
andy_list_prop_df[!is.na(andy_list_prop_df[, 2]), 2][109]
andy_list_prop_df[!is.na(andy_list_prop_df[, 2]), 2][53]
prop_df[prop_df$s == 60, 9][53]
cses_inc <- ggplot(prop_df[prop_df$s == 60, ], aes(x = inc_plur, y = inc_rcv)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
facet_wrap(~ s) +
theme_bw() +
scale_x_continuous(limits = c(0, 0.25), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 0.7), expand = c(0, 0)) +
labs(x = "Proportion of CSES respondents with positive SI under Plurality",
y = "Proportion of CSES respondents with positive SI under RCV")
ggsave(here("../output/figures/cses_inc.pdf"), cses_inc, width = 3, height = 6)
sv_list[[103]]
names(big_list_na_omit)[109]
head(sv_list[[109]]$tau_rcv)
head(big_list[[109]]$U)
head(big_list[["MEX_2003"]]$U)
# Load CSES data:
load(here("../output/cses_big_list_2.RData"))
head(big_list[["MEX_2003"]]$U)
# Set WD etc.
library(here)
# Load pivotal probability functions:
av_piv_path <- here("utils/av_pivotal_probs_analytical_general_v2.r")
source(av_piv_path)
plur_piv_path <- here("utils/plurality_pivotal_probabilities_analytical.r")
source(plur_piv_path)
# To replicate Andy's function(s):
sim_appr2 <- here("utils", "general_iteration_simulation_approach.r")
source(sim_appr2)
sv_file <-  here("utils/sv.r")
source(sv_file)
# Load my own functions:
functions <- here("utils/functions.r")
source(functions)
# Load necessary libraries:
library(ggplot2)
library(reshape2)
library(dplyr)
# Import AES and Ballot data
# Note that these are normalised utilities. To obtain like-dislike scores I will need to re-run the original script.
aes_utils <- read.csv(here("../data", "australia", "AES_utility.csv"))[, -1]
aes_utils <- aes_utils[, c("GRN", "LIB", "LAB")] #common ordering
# Import non-standardised utilities
aes_utils_raw <- read.csv(here("../data", "australia", "aes_nsw_full.csv"))[, -1]
nsw <- read.csv(here("../data/australia/nsw_ballots.csv"))[, -1]
resampling <- read.csv(here("../data/australia/nsw_resampling.csv"))[, -1]
# Create DF with ballotprofiles
const_bp <- data.frame(district = nsw$District,
AB = nsw$`GRN.LIB` + nsw$`GRN.LIB.LAB`,
AC = nsw$`GRN.LAB` + nsw$`GRN.LAB.LIB`,
BA = nsw$`LIB.GRN` + nsw$`LIB.GRN.LAB`,
BC = nsw$`LIB.LAB` + nsw$`LIB.LAB.GRN`,
CA = nsw$`LAB.GRN` + nsw$`LAB.GRN.LIB`,
CB = nsw$`LAB.LIB` + nsw$`LAB.LIB.GRN`,
A = nsw$GRN,
B = nsw$LIB,
C = nsw$LAB)
# For now, let's not use truncated ballots:
const_bp_no_trunc <- const_bp
const_bp_no_trunc[, 8:10] <- 0
const_bp_no_trunc[, 2:10] <- t(apply(const_bp_no_trunc[, 2:10], 1, function(x) x / sum(x)))
# Set levels of s at which to evaluate.
s_list <- as.list(seq(from = 10, to = 120, by = 10))
load(here("../output/mega_tau_list.Rdata"))
# From resulting loop, run:
# (1) levels of strategic voting
prop_list <- lapply(mega_tau_list, function(x) sv_prop(x))
sv_prop <- function(tau_obj, weights = rep(1, length(tau_obj))){
tau_list <- split(tau_obj, tau_obj$s)
# RCV proportions
opt_vote_prop <- lapply(tau_list, function(x) sum_opt_votes(x$sin_rcv, x$opt_rcv, type = "rcv", weights = weights))
prop_df_rcv <- do.call(rbind, opt_vote_prop)
opt_vote_prop_plur <- lapply(tau_list, function(x) sum_opt_votes(x$sin_rcv, x$opt_plur, type = "plur", weights = weights))
prop_df_plur <- do.call(rbind, opt_vote_prop_plur)
prop_df <- cbind(prop_df_rcv, prop_df_plur)
return(prop_df)
}
# From resulting loop, run:
# (1) levels of strategic voting
prop_list <- lapply(mega_tau_list, function(x) sv_prop(x))
sv_prop <- function(tau_obj, weights = NA){
tau_list <- split(tau_obj, tau_obj$s)
if(weights == NA){
weights <- rep(1, length(tau_list[[1]]))
}
# RCV proportions
opt_vote_prop <- lapply(tau_list, function(x) sum_opt_votes(x$sin_rcv, x$opt_rcv, type = "rcv", weights = weights))
prop_df_rcv <- do.call(rbind, opt_vote_prop)
opt_vote_prop_plur <- lapply(tau_list, function(x) sum_opt_votes(x$sin_rcv, x$opt_plur, type = "plur", weights = weights))
prop_df_plur <- do.call(rbind, opt_vote_prop_plur)
prop_df <- cbind(prop_df_rcv, prop_df_plur)
return(prop_df)
}
# From resulting loop, run:
# (1) levels of strategic voting
prop_list <- lapply(mega_tau_list, function(x) sv_prop(x))
sv_prop <- function(tau_obj, weights = NA){
tau_list <- split(tau_obj, tau_obj$s)
if(is.na(weights) == T) {
weights <- rep(1, length(tau_list[[1]]))
}
# RCV proportions
opt_vote_prop <- lapply(tau_list, function(x) sum_opt_votes(x$sin_rcv, x$opt_rcv, type = "rcv", weights = weights))
prop_df_rcv <- do.call(rbind, opt_vote_prop)
opt_vote_prop_plur <- lapply(tau_list, function(x) sum_opt_votes(x$sin_rcv, x$opt_plur, type = "plur", weights = weights))
prop_df_plur <- do.call(rbind, opt_vote_prop_plur)
prop_df <- cbind(prop_df_rcv, prop_df_plur)
return(prop_df)
}
# From resulting loop, run:
# (1) levels of strategic voting
prop_list <- lapply(mega_tau_list, function(x) sv_prop(x))
sv_prop <- function(tau_obj, weights = "fill"){
tau_list <- split(tau_obj, tau_obj$s)
if(weights == "fill") {
weights <- rep(1, length(tau_list[[1]]$sin_rcv))
}
# RCV proportions
opt_vote_prop <- lapply(tau_list, function(x) sum_opt_votes(x$sin_rcv, x$opt_rcv, type = "rcv", weights = weights))
prop_df_rcv <- do.call(rbind, opt_vote_prop)
opt_vote_prop_plur <- lapply(tau_list, function(x) sum_opt_votes(x$sin_rcv, x$opt_plur, type = "plur", weights = weights))
prop_df_plur <- do.call(rbind, opt_vote_prop_plur)
prop_df <- cbind(prop_df_rcv, prop_df_plur)
return(prop_df)
}
# From resulting loop, run:
# (1) levels of strategic voting
prop_list <- lapply(mega_tau_list, function(x) sv_prop(x))
head(mega_tau_list[[1]])
sv_prop(mega_tau_list[[1]])
sv_prop(mega_tau_list[[2]])
sv_prop(mega_tau_list[[3]])
sv_prop(mega_tau_list[[4]])
# From resulting loop, run:
# (1) levels of strategic voting
prop_list <- lapply(mega_tau_list, function(x) sv_prop(x))
sv_prop(mega_tau_list[[4]])
# From resulting loop, run:
# (1) levels of strategic voting
prop_list <- lapply(mega_tau_list, function(x) sv_prop(x))
tau_obj
?tryCatch
sv_prop <- function(tau_obj, weights = "fill"){
tryCatch(
tau_list <- split(tau_obj, tau_obj$s)
if(weights == "fill") {
weights <- rep(1, length(tau_list[[1]]$sin_rcv))
}
# RCV proportions
opt_vote_prop <- lapply(tau_list, function(x) sum_opt_votes(x$sin_rcv, x$opt_rcv, type = "rcv", weights = weights))
prop_df_rcv <- do.call(rbind, opt_vote_prop)
opt_vote_prop_plur <- lapply(tau_list, function(x) sum_opt_votes(x$sin_rcv, x$opt_plur, type = "plur", weights = weights))
prop_df_plur <- do.call(rbind, opt_vote_prop_plur)
prop_df <- cbind(prop_df_rcv, prop_df_plur)
return(prop_df)
)
}
?try
# From resulting loop, run:
# (1) levels of strategic voting
prop_list <- lapply(mega_tau_list, try(function(x) sv_prop(x)))
# From resulting loop, run:
# (1) levels of strategic voting
prop_list <- lapply(mega_tau_list, function(x) try(sv_prop(x)))
View(prop_list)
mega_tau_list[[46]]
load(here("../output/sv_list.Rdata"))
# Set levels of s at which to evaluate.
s_list <- as.list(seq(from = 10, to = 100, by = 10))
# Set levels of s at which to evaluate.
s_list <- as.list(c(15, 30, 45, 60, 75, 90, 105)))
# Set levels of s at which to evaluate.
s_list <- as.list(c(15, 30, 45, 60, 75, 90, 105))
set.seed(23112018)
mega_tau_list <- list()
for(i in 1:nrow(const_bp)){
print(i)
v_vec <- as.numeric(const_bp[i, 2:10])
mega_tau_list[[i]] <- return_sv_tau(v_vec, aes_utils_raw, s_list)
mega_tau_list[[i]]$const <- const_bp[i, 1]
}
# save as separate object to avoid having to run it every time.
save(mega_tau_list, file = here("../output/mega_tau_list.Rdata"))
prop_list <- lapply(mega_tau_list, function(x) try(sv_prop(x)))
prop_df <- as.data.frame(do.call(rbind, prop_list))
prop_df$const <- rep(c(const_bp$district), each = length(s_list))
prop_df$s <- rep(unlist(s_list), nrow(const_bp))
prop_df[, 1:5] <- prop_df[, 1:5] / 1133
prop_df <- prop_df[, c(2, 3, 5, 6, 7)]
names(prop_df)[1:3] <- c("second", "third", "plur_second")
prop_df_long <- melt(prop_df, id.vars = c("const", "s"))
prop_df_agg <- as.data.frame(prop_df_long %>%
group_by(variable, s) %>%
summarize(mean(value)))
names(prop_df_agg)[3] <- "value"
aus_freq <- ggplot(prop_df_long, aes(x = s, y = value)) +
geom_line(aes(colour = variable, group = interaction(const, variable)), alpha = 0.3) +
geom_line(data = prop_df_agg, aes(colour = variable, group = variable, x = s, y = value),
size = 3) +
labs(x = "Information (s)",
y = "Proportion of voters in AES casting ballot type",
colour = "Sincere pref. as first on ballot") +
theme_bw() +
theme(legend.position = "bottom")
aus_freq
aus_freq <- ggplot(prop_df_long, aes(x = s, y = value)) +
geom_line(aes(colour = variable, group = interaction(const, variable)), alpha = 0.05) +
geom_line(data = prop_df_agg, aes(colour = variable, group = variable, x = s, y = value),
size = 3) +
labs(x = "Information (s)",
y = "Proportion of voters in AES casting ballot type",
colour = "Sincere pref. as first on ballot") +
theme_bw() +
theme(legend.position = "bottom")
aus_freq
?ggsave
aus_freq <- ggplot(prop_df_long, aes(x = s, y = value)) +
geom_line(aes(colour = variable, group = interaction(const, variable)), alpha = 0.05) +
geom_line(data = prop_df_agg, aes(colour = variable, group = variable, x = s, y = value),
size = 3) +
labs(x = "Information (s)",
y = "Proportion of voters in AES casting ballot type",
colour = "Sincere pref. as first on ballot") +
theme_bw() +
theme(legend.position = "bottom", legend.direction = "vertical")
gg_path <- here("output/figures/australia_sv_freq.pdf")
ggsave(gg_path, height = 5, width = 4)
aus_freq <- ggplot(prop_df_long, aes(x = s, y = value)) +
geom_line(aes(colour = variable, group = interaction(const, variable)), alpha = 0.05) +
geom_line(data = prop_df_agg, aes(colour = variable, group = variable, x = s, y = value),
size = 3) +
labs(x = "Information (s)",
y = "Proportion of voters in AES casting ballot type",
colour = "Sincere pref. as first on ballot") +
theme_bw() +
theme(legend.position = "bottom", legend.direction = "vertical")
gg_path <- here("../output/figures/australia_sv_freq.pdf")
ggsave(gg_path, height = 5, width = 4)
ggsave(gg_path, height = 3, width = 3)
ggsave(gg_path, height = 5, width = 4)
aus_freq <- ggplot(prop_df_long, aes(x = s, y = value)) +
geom_line(aes(colour = variable, group = interaction(const, variable)), alpha = 0.05) +
geom_line(data = prop_df_agg, aes(colour = variable, group = variable, x = s, y = value),
size = 3) +
labs(x = "Information (s)",
y = "Proportion of voters in AES casting ballot type",
colour = "Sincere pref. as first on ballot") +
theme_bw() +
ylim(0, 0.5) +
theme(legend.position = "bottom", legend.direction = "vertical")
gg_path <- here("../output/figures/australia_sv_freq.pdf")
ggsave(gg_path, height = 5, width = 4)
aus_freq <- ggplot(prop_df_long, aes(x = s, y = value)) +
geom_line(aes(colour = variable, group = interaction(const, variable)), alpha = 0.05) +
geom_line(data = prop_df_agg, aes(colour = variable, group = variable, x = s, y = value),
size = 3) +
labs(x = "Information (s)",
y = "Proportion of voters in AES casting ballot type",
colour = "Sincere pref. as first on ballot") +
theme_bw() +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0.1, 0), limits = c(0, 0.5)) +
theme(legend.position = "bottom", legend.direction = "vertical")
gg_path <- here("../output/figures/australia_sv_freq.pdf")
ggsave(gg_path, height = 5, width = 4)
prop_list <- lapply(mega_tau_list, function(x) try(sv_prop(x)))
prop_df <- as.data.frame(do.call(rbind, prop_list))
prop_df$const <- rep(c(const_bp$district), each = length(s_list))
prop_df$s <- rep(unlist(s_list), nrow(const_bp))
prop_df[, 1:5] <- prop_df[, 1:5] / 1133
prop_df <- prop_df[, c(2, 3, 5, 6, 7)]
names(prop_df)[1:3] <- c("RCV_second", "RCV_third", "plur_second")
prop_df_long <- melt(prop_df, id.vars = c("const", "s"))
prop_df_agg <- as.data.frame(prop_df_long %>%
group_by(variable, s) %>%
summarize(mean(value)))
names(prop_df_agg)[3] <- "value"
aus_freq <- ggplot(prop_df_long, aes(x = s, y = value)) +
geom_line(aes(colour = variable, group = interaction(const, variable)), alpha = 0.05) +
geom_line(data = prop_df_agg, aes(colour = variable, group = variable, x = s, y = value),
size = 2) +
labs(x = "Information (s)",
y = "Proportion of voters in AES casting ballot type",
colour = "Sincere pref. as first on ballot") +
theme_bw() +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0.1, 0), limits = c(0, 0.5)) +
theme(legend.position = "bottom", legend.direction = "vertical")
gg_path <- here("../output/figures/australia_sv_freq.pdf")
ggsave(gg_path, height = 5, width = 4)
prop_df$inc_rcv <- prop_df$second + prop_df$third
prop_df$inc_rcv <- prop_df$RCV_second + prop_df$RCV_third
prop_df$inc_plur <- prop_df$plur_second
aus_inc <- ggplot(prop_df, aes(x = inc_plur, y = inc_rcv)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
facet_wrap(~ s) +
theme_bw() +
scale_x_continuous(limits = c(0, 0.7), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 0.7), expand = c(0, 0)) +
labs(x = "Proportion of AES respondents with positive SI under Plurality",
y = "Proportion of AES respondents with positive SI under RCV")
aus_s
aus_inc
aus_inc <- ggplot(prop_df, aes(x = inc_plur, y = inc_rcv)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
facet_wrap(~ s) +
theme_bw() +
scale_x_continuous(limits = c(0, 0.7), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 0.7), expand = c(0, 0)) +
labs(x = "Proportion of AES respondents with positive SI under Plurality",
y = "Proportion of AES respondents with positive SI under RCV")
gg_path2 <- here("../output/figures/australia_sv_prop.pdf")
ggsave(gg_path2, aus_inc, width = 5, height = 5)
qq_mega_list <- lapply(mega_tau_list, function(x) qq_function_two(x, aes_utils_raw))
qq_mega_df <- as.data.frame(do.call(rbind, qq_mega_list))
qq_mega_df$const <- rep(c(const_bp$district), each = nrow(aes_utils_raw) * length(unlist(s_list)))
qq_mega_by_s <- split(qq_mega_df, qq_mega_df$s)
qq_agg <- lapply(qq_mega_by_s, function(z) as.data.frame(qqplot(x = z$x, y = z$y, plot.it = FALSE)))
qq_agg_df <- as.data.frame(do.call(rbind, qq_agg))
qq_agg_df$s <- rep(unlist(s_list), each = nrow(aes_utils_raw) * nrow(const_bp))
aus_qq <- ggplot(qq_mega_df, aes(x = x, y = y)) +
geom_line(aes(x = x, y = y, group = const), alpha = 0.1) +
geom_line(data = qq_agg_df, aes(x = x, y = y), colour = "red", lwd = 2) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", colour = "blue") +
theme_bw()  +
facet_wrap(vars(s))
aus_qq
aus_qq <- ggplot(qq_mega_df, aes(x = x, y = y)) +
geom_line(aes(x = x, y = y, group = const), alpha = 0.1) +
geom_line(data = qq_agg_df, aes(x = x, y = y), colour = "red", lwd = 2) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", colour = "blue") +
theme_bw()  +
facet_wrap(vars(s)) +
xlim(-30, 30) + ylim(-30, 30)
ggsave(here("../output/figures/australia_sv_qq_trunc.pdf"), aus_qq)
ggsave(here("../output/figures/australia_sv_qq_trunc.pdf"), aus_qq, width = 6, height = 6)
# Set s = 80
mega_tau_fixed_s <- lapply(mega_tau_list, function(x) x[x$s == 75, ])
# Run loop over constituencies. This will take a long time...
inter_df <- list()
lambda_list <- as.list(seq(0, 0.5, 0.05))
for(i in 1:nrow(const_bp)){
print(i)
v_vec <- as.numeric(const_bp[i, 2:10]) / sum(as.numeric(const_bp[i, 2:10]))
tau <- mega_tau_fixed_s[[i]]
const_props <- level_two_props(v_vec, lambda_list, aes_utils_raw, tau, list(80))
#const_props$const <- const_bp[i, 1]
inter_df[[i]] <- const_props
}
vote_matrix_weighted <- function(df, type = "rcv",
weights = rep(1, nrow(df))){
# Input: dataframe output from return_sv_tau
# Output: 6x6 (RCV) or 6x3 (Plurality) matrix of votes
df$sin_rcv <- factor(df$sin_rcv, levels = 1:6)
if(type == "rcv"){
df$opt_rcv <- factor(df$opt_rcv, levels = 1:6)
tab <- wtd.table(df$sin_rcv, df$opt_rcv, weights)
# tab <- tapply(df$opt_rcv, df$sin_rcv, table)
# tab <- do.call(rbind, tab)
return(tab)
}
if(type == "plur"){
df$opt_plur <- factor(df$opt_plur, levels = 1:3)
tab <- wtd.table(df$sin_plur, df$opt_plur, weights)
return(tab)
}
}
convert_andy_to_sv_item <- function(list_item, s, v_vec){
# Generates sv object from Andy's function and converts it into my data structure -- much faster!
out_rcv <- sv(U = list_item$U, weights = list_item$weights, s = s, rule = "AV", v.vec = v_vec)
out_plur <- sv(U = list_item$U, weights = list_item$weights, s = s, v.vec = v_vec)
sin_rcv <- apply(out_rcv$V0, 1, function(x) which(x == 1))
sin_plur <- apply(out_plur$V0, 1, function(x) which(x == 1))
tau_rcv <- as.numeric(out_rcv$tau)
tau_plur <- as.numeric(out_plur$tau)
opt_rcv <- apply(out_rcv$V.mat, 1, function(x) which(x == 1))
opt_plur <- apply(out_plur$V.mat, 1, function(x) which(x == 1))
s <- rep(s, nrow(list_item$U))
df <- as.data.frame(cbind(sin_rcv, sin_plur, tau_rcv, tau_plur, opt_rcv, opt_plur, s))
return(df)
}
level_two_props_cses <- function(v_vec, lambda_list, util, sv_df, s, w = rep(1, nrow(util))){
# Create 6x6 and 6x3 matrices
vote_mat_rcv <- vote_matrix_weighted(sv_df, type = "rcv", w)
vote_mat_plur <- vote_matrix_weighted(sv_df, type = "plur", w)
v_vec_init_weighted <- as.numeric(v_vec[1:9] / sum(v_vec[1:9]))
v_vec_rcv <- new_v_vec(vote_mat_rcv, v_vec_init_weighted, lambda_list, type = "rcv")
v_vec_plur <- new_v_vec(vote_mat_plur, v_vec_init_weighted, lambda_list, type = "plur")
# sv_lvl_two_rcv <- lapply(v_vec_rcv, function(x) return_sv_tau(x, util, s))
sv_lvl_two_rcv <- lapply(v_vec_rcv, function(x) convert_andy_to_sv_item_two(util, w, s, v_vec))
lvl_two_summary_rcv <- lapply(sv_lvl_two_rcv, function(x) return_lvl_two_prop(sv_df, x, type = "rcv"))
lvl_two_summary_rcv <- do.call(rbind, lvl_two_summary_rcv)
sv_lvl_two_rcv <- lapply(v_vec_plur, function(x) convert_andy_to_sv_item_two(util, w, s, v_vec))
lvl_two_summary_plur <- lapply(sv_lvl_two_plur, function(x) return_lvl_two_prop(sv_df, x, type = "plur"))
lvl_two_summary_plur <- do.call(rbind, lvl_two_summary_plur)
df_out <- as.data.frame(cbind(lvl_two_summary_rcv, lvl_two_summary_plur))
names(df_out) <- c("L1RCV", "L0RCV", "L1PLUR", "L0PLUR")
df_out$s <- s
df_out$lambda <- unlist(lambda_list)
return(df_out)
}
level_two_props_cses <- function(v_vec, lambda_list, util, sv_df, s, w = rep(1, nrow(util))){
# Create 6x6 and 6x3 matrices
vote_mat_rcv <- vote_matrix_weighted(sv_df, type = "rcv", w)
vote_mat_plur <- vote_matrix_weighted(sv_df, type = "plur", w)
v_vec_init_weighted <- as.numeric(v_vec[1:9] / sum(v_vec[1:9]))
v_vec_rcv <- new_v_vec(vote_mat_rcv, v_vec_init_weighted, lambda_list, type = "rcv")
v_vec_plur <- new_v_vec(vote_mat_plur, v_vec_init_weighted, lambda_list, type = "plur")
# sv_lvl_two_rcv <- lapply(v_vec_rcv, function(x) return_sv_tau(x, util, s))
sv_lvl_two_rcv <- lapply(v_vec_rcv, function(x) convert_andy_to_sv_item_two(util, w, s, v_vec))
lvl_two_summary_rcv <- lapply(sv_lvl_two_rcv, function(x) return_lvl_two_prop(sv_df, x, type = "rcv"))
lvl_two_summary_rcv <- do.call(rbind, lvl_two_summary_rcv)
sv_lvl_two_rcv <- lapply(v_vec_plur, function(x) convert_andy_to_sv_item_two(util, w, s, v_vec))
lvl_two_summary_plur <- lapply(sv_lvl_two_plur, function(x) return_lvl_two_prop(sv_df, x, type = "plur"))
lvl_two_summary_plur <- do.call(rbind, lvl_two_summary_plur)
df_out <- as.data.frame(cbind(lvl_two_summary_rcv, lvl_two_summary_plur))
names(df_out) <- c("L1RCV", "L0RCV", "L1PLUR", "L0PLUR")
df_out$s <- s
df_out$lambda <- unlist(lambda_list)
return(df_out)
}
level_two_props_cses <- function(v_vec, lambda_list, util, sv_df, s, w = c(rep(1, nrow(util)))){
# Create 6x6 and 6x3 matrices
vote_mat_rcv <- vote_matrix_weighted(sv_df, type = "rcv", w)
vote_mat_plur <- vote_matrix_weighted(sv_df, type = "plur", w)
v_vec_init_weighted <- as.numeric(v_vec[1:9] / sum(v_vec[1:9]))
v_vec_rcv <- new_v_vec(vote_mat_rcv, v_vec_init_weighted, lambda_list, type = "rcv")
v_vec_plur <- new_v_vec(vote_mat_plur, v_vec_init_weighted, lambda_list, type = "plur")
# sv_lvl_two_rcv <- lapply(v_vec_rcv, function(x) return_sv_tau(x, util, s))
sv_lvl_two_rcv <- lapply(v_vec_rcv, function(x) convert_andy_to_sv_item_two(util, w, s, v_vec))
lvl_two_summary_rcv <- lapply(sv_lvl_two_rcv, function(x) return_lvl_two_prop(sv_df, x, type = "rcv"))
lvl_two_summary_rcv <- do.call(rbind, lvl_two_summary_rcv)
sv_lvl_two_rcv <- lapply(v_vec_plur, function(x) convert_andy_to_sv_item_two(util, w, s, v_vec))
lvl_two_summary_plur <- lapply(sv_lvl_two_plur, function(x) return_lvl_two_prop(sv_df, x, type = "plur"))
lvl_two_summary_plur <- do.call(rbind, lvl_two_summary_plur)
df_out <- as.data.frame(cbind(lvl_two_summary_rcv, lvl_two_summary_plur))
names(df_out) <- c("L1RCV", "L0RCV", "L1PLUR", "L0PLUR")
df_out$s <- s
df_out$lambda <- unlist(lambda_list)
return(df_out)
}
vote_matrix_weighted <- function(df, type = "rcv",
weights = rep(1, nrow(df))){
# Input: dataframe output from return_sv_tau
# Output: 6x6 (RCV) or 6x3 (Plurality) matrix of votes
df$sin_rcv <- factor(df$sin_rcv, levels = 1:6)
if(type == "rcv"){
df$opt_rcv <- factor(df$opt_rcv, levels = 1:6)
tab <- wtd.table(df$sin_rcv, df$opt_rcv, weights)
return(tab)
}
if(type == "plur"){
df$opt_plur <- factor(df$opt_plur, levels = 1:3)
tab <- wtd.table(df$sin_plur, df$opt_plur, weights)
return(tab)
}
}
vote_matrix_weighted <- function(df, type = "rcv",
weights = rep(1, nrow(df))){
# Input: dataframe output from return_sv_tau
# Output: 6x6 (RCV) or 6x3 (Plurality) matrix of votes
df$sin_rcv <- factor(df$sin_rcv, levels = 1:6)
if(type == "rcv"){
df$opt_rcv <- factor(df$opt_rcv, levels = 1:6)
tab <- as.matrix(wtd.table(df$sin_rcv, df$opt_rcv, weights))
return(tab)
}
if(type == "plur"){
df$opt_plur <- factor(df$opt_plur, levels = 1:3)
tab <- as.matrix(wtd.table(df$sin_plur, df$opt_plur, weights))
return(tab)
}
}
