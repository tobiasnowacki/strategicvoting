pivot_wider               package:tidyr                R Documentation

_P_i_v_o_t _d_a_t_a _f_r_o_m _l_o_n_g _t_o _w_i_d_e

_D_e_s_c_r_i_p_t_i_o_n:

     ‘pivot_wider()’ "widens" data, increasing the number of columns
     and decreasing the number of rows. The inverse transformation is
     ‘pivot_longer()’.

     Learn more in ‘vignette("pivot")’.

_U_s_a_g_e:

     pivot_wider(
       data,
       id_cols = NULL,
       names_from = name,
       names_prefix = "",
       names_sep = "_",
       names_glue = NULL,
       names_sort = FALSE,
       names_repair = "check_unique",
       values_from = value,
       values_fill = NULL,
       values_fn = NULL,
       ...
     )
     
_A_r_g_u_m_e_n_t_s:

    data: A data frame to pivot.

 id_cols: <‘tidy-select’> A set of columns that uniquely identifies
          each observation. Defaults to all columns in ‘data’ except
          for the columns specified in ‘names_from’ and ‘values_from’.
          Typically used when you have redundant variables, i.e.
          variables whose values are perfectly correlated with existing
          variables.

names_from, values_from: <‘tidy-select’> A pair of arguments describing
          which column (or columns) to get the name of the output
          column (‘names_from’), and which column (or columns) to get
          the cell values from (‘values_from’).

          If ‘values_from’ contains multiple values, the value will be
          added to the front of the output column.

names_prefix: String added to the start of every variable name. This is
          particularly useful if ‘names_from’ is a numeric vector and
          you want to create syntactic variable names.

names_sep: If ‘names_from’ or ‘values_from’ contains multiple
          variables, this will be used to join their values together
          into a single string to use as a column name.

names_glue: Instead of ‘names_sep’ and ‘names_prefix’, you can supply a
          glue specification that uses the ‘names_from’ columns (and
          special ‘.value’) to create custom column names.

names_sort: Should the column names be sorted? If ‘FALSE’, the default,
          column names are ordered by first appearance.

names_repair: What happens if the output has invalid column names? The
          default, ‘"check_unique"’ is to error if the columns are
          duplicated. Use ‘"minimal"’ to allow duplicates in the
          output, or ‘"unique"’ to de-duplicated by adding numeric
          suffixes. See ‘vctrs::vec_as_names()’ for more options.

values_fill: Optionally, a (scalar) value that specifies what each
          ‘value’ should be filled in with when missing.

          This can be a named list if you want to apply different
          aggregations to different value columns.

values_fn: Optionally, a function applied to the ‘value’ in each cell
          in the output. You will typically use this when the
          combination of ‘id_cols’ and ‘value’ column does not uniquely
          identify an observation.

          This can be a named list if you want to apply different
          aggregations to different value columns.

     ...: Additional arguments passed on to methods.

_D_e_t_a_i_l_s:

     ‘pivot_wider()’ is an updated approach to ‘spread()’, designed to
     be both simpler to use and to handle more use cases. We recommend
     you use ‘pivot_wider()’ for new code; ‘spread()’ isn't going away
     but is no longer under active development.

_S_e_e _A_l_s_o:

     ‘pivot_wider_spec()’ to pivot "by hand" with a data frame that
     defines a pivotting specification.

_E_x_a_m_p_l_e_s:

     # See vignette("pivot") for examples and explanation
     
     fish_encounters
     fish_encounters %>%
       pivot_wider(names_from = station, values_from = seen)
     # Fill in missing values
     fish_encounters %>%
       pivot_wider(names_from = station, values_from = seen, values_fill = 0)
     
     # Generate column names from multiple variables
     us_rent_income
     us_rent_income %>%
       pivot_wider(names_from = variable, values_from = c(estimate, moe))
     
     # When there are multiple `names_from` or `values_from`, you can use
     # use `names_sep` or `names_glue` to control the output variable names
     us_rent_income %>%
       pivot_wider(
         names_from = variable,
         names_sep = ".",
         values_from = c(estimate, moe)
       )
     us_rent_income %>%
       pivot_wider(
         names_from = variable,
         names_glue = "{variable}_{.value}",
         values_from = c(estimate, moe)
       )
     
     # Can perform aggregation with values_fn
     warpbreaks <- as_tibble(warpbreaks[c("wool", "tension", "breaks")])
     warpbreaks
     warpbreaks %>%
       pivot_wider(
         names_from = wool,
         values_from = breaks,
         values_fn = mean
       )
     

